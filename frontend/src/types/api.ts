/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/game_rooms/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Game Rooms */
    get: operations['get_game_rooms_game_rooms__get']
    put?: never
    /** Create Game Room */
    post: operations['create_game_room_game_rooms__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/data/{game_room_id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Game Room */
    get: operations['get_game_room_game_rooms_data__game_room_id___get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/find': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Find Game Room By Password */
    get: operations['find_game_room_by_password_game_rooms_find_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/join/{game_room_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Join Game Room */
    post: operations['join_game_room_game_rooms_join__game_room_id__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/leave': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Leave Game Room */
    post: operations['leave_game_room_game_rooms_leave_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/{game_room_id}/end/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** End Game Room */
    post: operations['end_game_room_game_rooms__game_room_id__end__post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_rooms/{game_room_id}/snapshot/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Game Room Snapshot */
    get: operations['get_game_room_snapshot_game_rooms__game_room_id__snapshot__get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/game_auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Refresh Token */
    post: operations['refresh_token_game_auth_refresh_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/types/ws/server': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Types Server */
    get: operations['get_types_server_types_ws_server_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/types/ws/client': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Types Client */
    get: operations['get_types_client_types_ws_client_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** ApiErrorDetail */
    ApiErrorDetail: {
      code: components['schemas']['ErrorCode']
      /**
       * Should Refresh Token
       * @default false
       */
      should_refresh_token: boolean
      /** Message */
      message: string
    } & {
      [key: string]: unknown
    }
    /** BaseEvent */
    BaseEvent: {
      /** Seq */
      seq: number
      /** Room Id */
      room_id: number
      /** Type */
      type: components['schemas']['RoomEvent'] | components['schemas']['GameEvent'] | string
      /**
       * Ts
       * Format: date-time
       */
      ts?: string
      /** Actor Id */
      actor_id?: string | null
      /** Data */
      data?: {
        [key: string]: unknown
      }
    }
    /** ClientMessageChatMessage */
    ClientMessageChatMessage: {
      /**
       * Type
       * @default chat_message
       * @constant
       */
      type: 'chat_message'
      /** Event Key */
      event_key?: string | null
      /** Text */
      text: string
    }
    /**
     * ClientMessageErrorCode
     * @enum {string}
     */
    ClientMessageErrorCode: 'invalid_message' | 'unknown_type' | 'game_not_found' | 'missing_permissions'
    /** ClientMessageGameAction */
    ClientMessageGameAction: {
      /**
       * Type
       * @default action
       * @constant
       */
      type: 'action'
      /** Event Key */
      event_key?: string | null
      data: components['schemas']['ConnectFourActionData']
    }
    /** ClientMessageGameStart */
    ClientMessageGameStart: {
      /**
       * Type
       * @default game_start
       * @constant
       */
      type: 'game_start'
      /** Event Key */
      event_key?: string | null
    }
    /** ClientMessagePing */
    ClientMessagePing: {
      /**
       * Type
       * @default ping
       * @constant
       */
      type: 'ping'
      /** Event Key */
      event_key?: string | null
    }
    /** ConnectFourActionData */
    ConnectFourActionData: {
      /** Player */
      player: number
      /** Column */
      column: number
    }
    /** CreateGameRoomData */
    CreateGameRoomData: {
      game_type: components['schemas']['GameType']
      /** Password */
      password: string
      /** User Name */
      user_name: string
    }
    /** CreateGameRoomResponse */
    CreateGameRoomResponse: {
      game_room: components['schemas']['GameRoomModel']
      player: components['schemas']['GamePlayerModel']
    }
    /** EndGameRoomResponse */
    EndGameRoomResponse: {
      /** Success */
      success: boolean
      /** Message */
      message: string
    }
    /**
     * ErrorCode
     * @enum {string}
     */
    ErrorCode: 'internal_error' | 'forbidden' | 'no_refresh' | 'already_in_game_room' | 'not_in_game_room' | 'password_used' | 'password_invalid' | 'game_room_full' | 'game_room_does_not_exist' | 'missing_query_params'
    /**
     * GameEvent
     * @enum {string}
     */
    GameEvent: 'game.start' | 'game.state.update' | 'player.action'
    /**
     * GameExceptionType
     * @enum {string}
     */
    GameExceptionType: 'game_exception.state_incompatibility' | 'game_exception.wrong_player' | 'game_exception.unknown_action' | 'game_exception.forbidden_action' | 'game_exception.invalid_action_data'
    /** GamePlayerModel */
    GamePlayerModel: {
      /** Id */
      id?: string
      /** User Name */
      user_name: string
      /** Room Id */
      room_id: number
      /** @default player */
      role: components['schemas']['UserRole']
    }
    /** GameRoomListResponse */
    GameRoomListResponse: {
      /** Data */
      data: components['schemas']['PublicGameRoomModel'][]
    }
    /** GameRoomModel */
    GameRoomModel: {
      /** Id */
      id?: number | null
      /** Created At */
      created_at?: string | null
      /** Password */
      password: string
      /** @default connect_four */
      game_type: components['schemas']['GameType']
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
    }
    /**
     * GameType
     * @enum {string}
     */
    GameType: 'connect_four'
    /** GetGameRoomResponse */
    GetGameRoomResponse: {
      game_room: components['schemas']['GameRoomModel']
      current_player?: components['schemas']['GamePlayerModel'] | null
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** LeaveGameRoomResponse */
    LeaveGameRoomResponse: {
      /** Message */
      message: string
    }
    /**
     * PlayerStatus
     * @enum {string}
     */
    PlayerStatus: 'connected' | 'disconnected'
    /** PublicGameRoomModel */
    PublicGameRoomModel: {
      /** Id */
      id: number
      game_type: components['schemas']['GameType']
    }
    /**
     * RoomEvent
     * @enum {string}
     */
    RoomEvent: 'player.joined' | 'player.left' | 'room.closed' | 'message.sent'
    /**
     * RoomStatus
     * @enum {string}
     */
    RoomStatus: 'waiting_for_players' | 'waiting_for_start' | 'waiting_for_player' | 'in_progress' | 'closed'
    /** SnapshotBase */
    SnapshotBase: {
      /** Room Id */
      room_id: number
      /** @default waiting_for_players */
      status: components['schemas']['RoomStatus']
      /** Players */
      players?: components['schemas']['SnapshotPlayer'][]
      /** Chat Messages */
      chat_messages?: components['schemas']['SnapshotChatMessage'][]
      /** Game State */
      game_state?: {
        [key: string]: unknown
      } | null
    }
    /** SnapshotChatMessage */
    SnapshotChatMessage: {
      /**
       * Type
       * @default text
       * @constant
       */
      type: 'text'
      /** Sender Id */
      sender_id: string
      /** Value */
      value: string
    }
    /** SnapshotPlayer */
    SnapshotPlayer: {
      /** User Name */
      user_name: string
      role: components['schemas']['UserRole']
      /** Id */
      id: string
      /** @default connected */
      status: components['schemas']['PlayerStatus']
    }
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: 'admin' | 'player'
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
    /** WSMessageBase */
    WSMessageBase: {
      type: components['schemas']['WSMessageType']
    }
    /** WSMessageError */
    WSMessageError: {
      /**
       * Type
       * @default error
       * @constant
       */
      type: 'error'
      /** Code */
      code: components['schemas']['ClientMessageErrorCode'] | components['schemas']['GameExceptionType']
      /** Message */
      message: string
    }
    /** WSMessageEvent */
    WSMessageEvent: {
      /**
       * Type
       * @default event
       * @constant
       */
      type: 'event'
      /** Seq */
      seq: number
      event: components['schemas']['BaseEvent']
    }
    /** WSMessagePing */
    WSMessagePing: {
      /**
       * Type
       * @default ping
       * @constant
       */
      type: 'ping'
      /** Timestamp */
      timestamp: number
    }
    /** WSMessageResponse */
    WSMessageResponse: {
      /**
       * Type
       * @default response
       * @constant
       */
      type: 'response'
      /** Event Key */
      event_key: string
      /** Success */
      success: boolean
      error?: components['schemas']['WSMessageError'] | null
    }
    /** WSMessageSnapshot */
    WSMessageSnapshot: {
      /**
       * Type
       * @default snapshot
       * @constant
       */
      type: 'snapshot'
      /** Last Seq */
      last_seq: number
      data: components['schemas']['SnapshotBase']
    }
    /**
     * WSMessageType
     * @enum {string}
     */
    WSMessageType: 'snapshot' | 'event' | 'ping' | 'response' | 'error'
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  get_game_rooms_game_rooms__get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GameRoomListResponse']
        }
      }
    }
  }
  create_game_room_game_rooms__post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: {
        authorization?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGameRoomData']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateGameRoomResponse']
        }
      }
      /** @description User is already in a game room */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorDetail']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_game_room_game_rooms_data__game_room_id___get: {
    parameters: {
      query?: {
        password?: string | null
      }
      header?: never
      path: {
        game_room_id: number
      }
      cookie?: {
        authorization?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetGameRoomResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  find_game_room_by_password_game_rooms_find_get: {
    parameters: {
      query: {
        password: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GameRoomModel']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  join_game_room_game_rooms_join__game_room_id__post: {
    parameters: {
      query: {
        password: string
        user_name: string
      }
      header?: never
      path: {
        game_room_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GamePlayerModel']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  leave_game_room_game_rooms_leave_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: {
        authorization?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LeaveGameRoomResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  end_game_room_game_rooms__game_room_id__end__post: {
    parameters: {
      query?: never
      header?: never
      path: {
        game_room_id: number
      }
      cookie?: {
        authorization?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EndGameRoomResponse']
        }
      }
      /** @description User is not admin or not in the game room */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorDetail']
        }
      }
      /** @description Game room does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorDetail']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_game_room_snapshot_game_rooms__game_room_id__snapshot__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        game_room_id: number
      }
      cookie?: {
        authorization?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SnapshotBase']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  refresh_token_game_auth_refresh_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: {
        refresh?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_types_server_types_ws_server_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WSMessageBase'] | components['schemas']['WSMessageSnapshot'] | components['schemas']['WSMessageEvent'] | components['schemas']['WSMessagePing'] | components['schemas']['WSMessageError'] | components['schemas']['WSMessageResponse'] | null
        }
      }
    }
  }
  get_types_client_types_ws_client_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ClientMessagePing'] | components['schemas']['ClientMessageChatMessage'] | components['schemas']['ClientMessageGameStart'] | components['schemas']['ClientMessageGameAction'] | null
        }
      }
    }
  }
}
